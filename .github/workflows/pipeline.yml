name: Integrated Security Pipeline

on:
  push:
    branches: [ "quality", "main" ]
  pull_request:
    branches: [ "quality", "main" ]

jobs:

  # ---------------------------
  # SAST - Semgrep
  # ---------------------------
  sast:
    name: SAST - Semgrep Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: semgrep scan --sarif --config "p/java" --output semgrep.sarif

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  # ---------------------------
  # Build & Run App for DAST
  # ---------------------------
  build-and-run:
    name: Build & Run Java App
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      security-events: write
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: rodrigoviana
          POSTGRES_PASSWORD: dfr16464
          POSTGRES_DB: challenge2025
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U rodrigoviana -d challenge2025"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven (skip tests)
        run: mvn -B clean package -DskipTests

      - name: Wait for Postgres
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: rodrigoviana
          PGPASSWORD: dfr16464
        run: |
          echo "Waiting for Postgres to be ready..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U "$PGUSER" -d challenge2025 && break
            sleep 2
          done
          pg_isready -h localhost -p 5432 -U "$PGUSER" -d challenge2025 || (echo "Postgres not ready" && exit 1)

      - name: Start App
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/challenge2025
          SPRING_DATASOURCE_USERNAME: rodrigoviana
          SPRING_DATASOURCE_PASSWORD: dfr16464
        run: |
          nohup java -jar target/*.jar > app.log 2>&1 &
          sleep 20
          # check the actuator health endpoint; this returns 200 when healthy
          curl -sSf http://localhost:8080/actuator/health || (cat app.log && exit 1)

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8080'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue_title: 'Relatório de Vulnerabilidades DAST'
          fail_action: true

  # ---------------------------
  # DAST - OWASP ZAP
  # (moved into build-and-run so the scanner can reach localhost)
  # ---------------------------
  # ---------------------------
  # SCA - Dependency Check
  # ---------------------------
  sca:
    name: SCA - Dependency-Check
    runs-on: ubuntu-latest
    env:
      OSSINDEX_USERNAME: ${{ secrets.OSSINDEX_USERNAME }}
      OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Run Dependency-Check (with OSS Index credentials)
        if: ${{ env.OSSINDEX_USERNAME != '' && env.OSSINDEX_TOKEN != '' }}
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'GamblersApp'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24
            --failOnCVSS 7.0
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
          OSSINDEX_USERNAME: ${{ secrets.OSSINDEX_USERNAME }}
          OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}

      - name: Run Dependency-Check (without OSS Index credentials)
        if: ${{ env.OSSINDEX_USERNAME == '' || env.OSSINDEX_TOKEN == '' }}
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        with:
          project: 'GamblersApp'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24
            --failOnCVSS 7.0
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - name: Upload SCA Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

      - name: List reports directory
        run: |
          echo "Reports list:"
          ls -la reports || true

  # ---------------------------
  # Notify on Failure
  # ---------------------------
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [sast, build-and-run, sca]
    if: failure()
    steps:
      - name: Print Failure Message
        run: echo "⚠️ O pipeline de segurança falhou. Verifique os logs e relatórios gerados."
