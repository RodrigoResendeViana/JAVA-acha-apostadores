name: Integrated Security Pipeline

on:
  push:
    branches: [ "quality", "main" ]
  pull_request:
    branches: [ "quality", "main" ]

jobs:

  # ---------------------------
  # SAST - Semgrep
  # ---------------------------
  sast:
    name: SAST - Semgrep Scan
    runs-on: ubuntu-latest
    container:
      image: returntocorp/semgrep

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Semgrep Scan
        run: semgrep scan --sarif --config "p/java" --output semgrep.sarif

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

  # ---------------------------
  # CodeQL - SAST complement
  # ---------------------------
  codeql-analysis:
    name: SAST - CodeQL Analysis
    runs-on: ubuntu-latest
    needs: [sast]
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ---------------------------
  # Unit tests and security gate
  # ---------------------------
  unit-tests:
    name: Unit & Security Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn -B test

      - name: Install Semgrep
        run: |
          python3 -m pip install --upgrade pip
          pip install semgrep

      - name: Run Semgrep (scan for HIGH severity issues)
        run: |
          # Generate SARIF file for all findings
          semgrep scan --sarif --config "p/java" --output semgrep_unit.sarif .
          # Check for HIGH severity issues and fail if found
          semgrep scan --config "p/java" --severity HIGH . || (echo "HIGH severity issues found!" && exit 1)

      - name: Upload Semgrep SARIF from unit stage
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep_unit.sarif
        if: always()

  # ---------------------------
  # Build & Run App for DAST
  # ---------------------------
  build-and-run:
    name: Build & Run Java App
    runs-on: ubuntu-latest
    needs: [sast, codeql-analysis, unit-tests]
    permissions:
      contents: read
      issues: write
      security-events: write
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U rodrigoviana -d challenge2025"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Maven (skip tests)
        run: mvn -B clean package -DskipTests

      - name: Wait for Postgres
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: ${{ secrets.POSTGRES_USER }}
          PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          echo "Waiting for Postgres to be ready..."
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U "$PGUSER" -d challenge2025 && break
            sleep 2
          done
          pg_isready -h localhost -p 5432 -U "$PGUSER" -d challenge2025 || (echo "Postgres not ready" && exit 1)

      - name: Start App
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ secrets.POSTGRES_DB }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.POSTGRES_USER }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          nohup java -jar target/*.jar > app.log 2>&1 &
          sleep 20
          # check the actuator health endpoint; this returns 200 when healthy
          curl -sSf http://localhost:8080/actuator/health || (cat app.log && exit 1)

      - name: Run ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8080'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue_title: 'RelatÃ³rio de Vulnerabilidades DAST'
          fail_action: false

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: |
            report_html.html
            report_json.json
            report_md.md

  # ---------------------------
  # SCA - Dependency Check
  # ---------------------------
  sca:
    name: SCA - Dependency-Check
    runs-on: ubuntu-latest
    env:
      OSSINDEX_USERNAME: ${{ secrets.OSSINDEX_USERNAME }}
      OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: Run Dependency-Check (with OSS Index credentials)
        if: ${{ env.OSSINDEX_USERNAME != '' && env.OSSINDEX_TOKEN != '' }}
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'GamblersApp'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24
            --failOnCVSS 7.0
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
          OSSINDEX_USERNAME: ${{ secrets.OSSINDEX_USERNAME }}
          OSSINDEX_TOKEN: ${{ secrets.OSSINDEX_TOKEN }}

      - name: Run Dependency-Check (without OSS Index credentials)
        if: ${{ env.OSSINDEX_USERNAME == '' || env.OSSINDEX_TOKEN == '' }}
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        with:
          project: 'GamblersApp'
          path: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24
            --failOnCVSS 7.0
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      - name: Upload SCA Report
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports

      - name: List reports directory
        run: |
          echo "Reports list:"
          ls -la reports || true

  # ---------------------------
  # LGPD Compliance checks
  # ---------------------------
  lgpd-compliance:
    name: LGPD - Automated Compliance Checks
    runs-on: ubuntu-latest
    needs: [unit-tests, sca]
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run project build (skip tests)
        run: mvn -B clean package -DskipTests

      - name: Run LGPD checks (generate violations.txt)
        id: lgpd_check
        run: |
          set -e
          VIOL="violations.txt"
          > $VIOL

          echo "Running LGPD heuristic checks..."

          # 1) consent presence (controllers, entities or SQL table names)
          if ! grep -R --line-number -i "consent" src > /dev/null 2>&1 && ! grep -R --line-number -i "user_consent" src > /dev/null 2>&1; then
            echo "MISSING_CONSENT_INDICATION: No 'consent' keyword or 'user_consent' table found (search for endpoints/tables that record consent)." >> $VIOL
          fi

          # 2) data minimization: detect 'cpf' occurrences in source (best-effort)
          if grep -R --line-number -i "cpf" src | grep -v "test" > /dev/null 2>&1; then
            echo "POTENTIAL_OVERCOLLECTION: 'cpf' found in source files. Validate if collection is necessary and justified." >> $VIOL
          fi

          # 3) encryption at rest / bcrypt usage
          if ! grep -R --line-number -i "BCrypt" src > /dev/null 2>&1; then
            echo "MISSING_PASSWORD_HASHING: No BCrypt usage detected. Ensure passwords and sensitive fields are hashed/stored securely." >> $VIOL
          fi

          # 4) HTTPS / TLS configuration (application properties or Dockerfile)
          if ! grep -R --line-number -i "server.ssl.enabled" src > /dev/null 2>&1 && ! grep -R --line-number -i "https" src > /dev/null 2>&1; then
            echo "MISSING_TLS_CONFIG: No 'server.ssl.enabled' or explicit HTTPS mentions found in repo. Validate TLS in deployment config." >> $VIOL
          fi

          # 5) RBAC annotations (PreAuthorize, Secured, RolesAllowed)
          if ! grep -R --line-number -E "@PreAuthorize|@Secured|@RolesAllowed" src > /dev/null 2>&1; then
            echo "MISSING_RBAC_ANNOTATIONS: No RBAC annotations (@PreAuthorize/@Secured/@RolesAllowed) found in controllers. Ensure endpoints are protected." >> $VIOL
          fi

          # 6) Delete / export endpoints (portability & right to be forgotten)
          if ! grep -R --line-number -E "@DeleteMapping|DeleteMapping|/users/.*/export|/users/.*/portability|/export|/users/.*/delete" src > /dev/null 2>&1; then
            echo "MISSING_DELETE_EXPORT_ENDPOINTS: No obvious delete/export endpoints found. Implement DELETE and export/portability endpoints for users." >> $VIOL
          fi

          # 7) Logging consent / audit trails detection (search for 'logger' + 'consent' or 'audit' references)
          if ! ( grep -R --line-number -i "consent" src > /dev/null 2>&1 && grep -R --line-number -i "logger\|log.info\|audit" src > /dev/null 2>&1 ); then
            echo "MISSING_CONSENT_LOGGING: Unable to find clear logs/audit entries for consent. Ensure consent decisions are logged and persisted." >> $VIOL
          fi

          # Output results
          if [ -s $VIOL ]; then
            echo "FOUND_VIOLATIONS=true" >> $GITHUB_OUTPUT
            echo "Violations report:"
            cat $VIOL
            exit 1
          else
            echo "FOUND_VIOLATIONS=false" >> $GITHUB_OUTPUT
            echo "No LGPD heuristic violations detected."
          fi

      - name: Upload LGPD violations artifact
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: lgpd-violations
          path: violations.txt

      - name: Create Issue on LGPD violations
        if: ${{ steps.lgpd_check.outputs.FOUND_VIOLATIONS == 'true' }}
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "â ï¸ LGPD: possÃ­veis violaÃ§Ãµes automatizadas detectadas"
          content-filepath: violations.txt
          labels: "lgpd,security,automated-scan"
          assignees: ""
          token: ${{ secrets.GITHUB_TOKEN }}

  # ---------------------------
  # Notify on Failure
  # ---------------------------
  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [sast, build-and-run, sca, unit-tests, lgpd-compliance]
    if: failure()
    steps:
      - name: Print Failure Message
        run: echo "â ï¸ O pipeline de seguranÃ§a falhou. Verifique os logs e relatÃ³rios gerados."
