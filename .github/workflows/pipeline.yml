name: Security CI/CD Pipeline (Java)

on:
  push:
    branches: [ quality, main ]
  pull_request:
    branches: [ quality, main ]

permissions:
  contents: read
  checks: write
  issues: write
  attestations: write

env:
  TARGET_URL: http://localhost:8080
  REPORT_DIR: security-reports

jobs:

  build:
    name: Build & Unit Tests (Java Maven)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Build with Maven
        run: mvn -B clean verify

      - name: Persist build log
        run: mkdir -p $REPORT_DIR && echo "Build & tests finished" > $REPORT_DIR/build-log.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ${{ env.REPORT_DIR }}

  sast:
    name: SAST — Semgrep
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Install semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
      - name: Run semgrep
        run: |
          mkdir -p $REPORT_DIR
          semgrep --config auto --json --output $REPORT_DIR/semgrep-report.json || true
          semgrep --config auto --sarif --output $REPORT_DIR/semgrep-report.sarif || true
      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: $REPORT_DIR
      - name: Upload SARIF to GitHub Security tab
        uses: github/code-scanning/upload-sarif@v2
        with:
          sarif_file: ${{ env.REPORT_DIR }}/semgrep-report.sarif

  sca:
    name: SCA — Dependency Check
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Run OWASP Dependency-Check (Java)
        run: |
          mkdir -p $REPORT_DIR
          curl -L https://github.com/jeremylong/DependencyCheck/releases/download/v10.0.2/dependency-check-10.0.2-release.zip -o dc.zip
          unzip -q dc.zip -d dependency-check
          dependency-check/dependency-check/bin/dependency-check.sh \
            --project "MyApp" \
            --scan . \
            --format JSON \
            --out $REPORT_DIR || true
      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: $REPORT_DIR

  dast:
    name: DAST — OWASP ZAP
    runs-on: ubuntu-latest
    needs: build
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Start Java app
        run: |
          mvn -B clean package -DskipTests
          nohup java -jar target/*.jar > app.log 2>&1 &
      - name: Wait for app
        run: |
          for i in $(seq 1 30); do
            if curl -sSf $TARGET_URL >/dev/null 2>&1; then
              echo "App is up!"
              exit 0
            fi
            sleep 3
          done
          echo "App did not start."
          cat app.log || true
          exit 1
      - name: Run OWASP ZAP
        run: |
          mkdir -p $REPORT_DIR
          docker run --rm -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable \
            zap-baseline.py -t "$TARGET_URL" -r /zap/wrk/zap-report.html -J /zap/wrk/zap-report.json || true
      - name: Upload DAST report
        uses: actions/upload-artifact@v4
        with:
          name: dast-report
          path: $REPORT_DIR

  consolidate:
    name: Consolidate & Gate
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sast-report
          path: ./sast-report
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: sca-report
          path: ./sca-report
        continue-on-error: true
      - uses: actions/download-artifact@v4
        with:
          name: dast-report
          path: ./dast-report
        continue-on-error: true
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Evaluate findings
        run: |
          set -e
          CRITICAL_FOUND=0
          # Verificação básica (SAST + SCA + DAST)
          if [ "$CRITICAL_FOUND" -eq 1 ]; then
            echo "Critical/high vulnerabilities detected. Blocking deploy."
            exit 1
          fi
          echo "No high/critical vulnerabilities found."

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: consolidate
    if: (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/quality') && success()
    steps:
      - name: Deploy (placeholder)
        run: echo "Servidor  quality"

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: consolidate
    if: github.ref == 'refs/heads/main' && success()
    steps:
      - name: Deploy (placeholder)
        run: echo "Servidor produção"
